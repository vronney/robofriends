{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","e","setState","searchField","target","value","state","bind","console","log","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAmBeA,EAbF,SAACC,GAAW,IACfC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACE,4BAAKL,GACL,2BAAIC,MCWGK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAOC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCDVW,EAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKV,UAAU,OACb,2BAAOA,UAAU,mBAAmBW,KAAK,SACzCC,YAAY,gBACZC,SAAWH,MCGFI,G,MARA,SAAClB,GACd,OACE,yBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,WAClEtB,EAAMuB,YCgDEC,E,YA9Cb,aAAe,IAAD,8BACZ,+CAoBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SApBrC,EAAKC,MAAQ,CACXvB,OAAQ,GACRoB,YAAa,IAEf,EAAKH,eAAiB,EAAKA,eAAeO,KAApB,gBACtBC,QAAQC,IAAI,eAPA,E,iFAUO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GACN,OAAOA,EAASC,UAEfF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAACnB,OAAQ+B,OAE3BN,QAAQC,IAAI,uB,+BAOJ,IAAD,OACPD,QAAQC,IAAI,UACZ,IAAMM,EAAiBC,KAAKV,MAAMvB,OAAOkC,QAAO,SAAAhC,GAC9C,OAAOA,EAAMT,KAAK0C,cAAcC,SAAS,EAAKb,MAAMH,YAAYe,kBAElE,OAAiC,IAA7BF,KAAKV,MAAMvB,OAAOqC,OACb,wBAAIzC,UAAU,UAAd,gBAGL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAc2B,KAAKhB,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjB,OAAQgC,U,GAvCZM,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.a60cc3da.chunk.js","sourcesContent":["/* eslint-disable-next-line */\r\n/* eslint-disable semi */\r\n/* eslint-disable indent */\r\n/* eslint-disable linebreak-style */\r\nimport React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  const { name, email, id } = props;\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","/* eslint-disable indent */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport React from \"react\"\r\nimport Card from \"./Card\"\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n     { \r\n      robots.map((robot, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email} />\r\n        );\r\n      })\r\n     }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList","/* eslint-disable no-undef */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable indent */\r\nimport React from \"react\"\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div className=\"pa2\">\r\n      <input className=\"bg-lightest-blue\" type=\"search\" \r\n      placeholder=\"search robots\"\r\n      onChange={ searchChange } />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox","/* eslint-disable indent */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable no-unused-vars */\r\nimport React from \"react\"\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: \"scroll\", border: \"1px solid black\", height: \"77.5vh\"}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll","/* eslint-disable indent */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable linebreak-style */\r\nimport React, { Component } from \"react\"\r\nimport CardList from \"../components/CardList\"\r\nimport SearchBox from \"../components/SearchBox\"\r\nimport \"./App.css\"\r\nimport Scroll from \"../components/Scroll\"\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\"\r\n    }\r\n    this.onSearchChange = this.onSearchChange.bind(this)\r\n    console.log('constructor');\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n      return response.json();\r\n    })\r\n      .then(users => {\r\n        this.setState({robots: users})\r\n    });\r\n    console.log('componentDidMount');\r\n  }\r\n\r\n  onSearchChange = (e) => {\r\n    this.setState({searchField: e.target.value})\r\n  } \r\n\r\n  render() {\r\n    console.log('render');\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n    })\r\n    if (this.state.robots.length === 0) {\r\n      return <h1 className=\"tc mv7\">Loading.....</h1>\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>  \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable indent */\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"tachyons\"\nimport App from \"./containers/App\"\n// import App from './App';\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}